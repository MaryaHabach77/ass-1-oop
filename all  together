// File: A1_T1_S27_20230701.cpp 
// Porpose : code for problem (2,4,8,11)
// Author: Marya Bilal Hassan habach
// Section: S27 
// ID: 20230701
// TA: dont know yet 
// Date: 10 oct 2024 
// This C++ program provides solutions to multiple problems, organized under a menu-driven interface for user interaction. It includes four main functionalities: converting masculine pronouns (like "he", "him", and "his") to inclusive pronouns (like "he or she" and "him or her"), managing a list of players and their scores where users can add players, print the top 10 players, or search for a player's highest score. Another functionality prints a recursive star pattern where the number of stars reduces by half in each recursive step. The final feature allows for file comparison either character by character or word by word, indicating differences in content between two files. The user can choose one of these problems from the menu, interact with it, and either continue or exit the program. Each section of the code focuses on solving its problem efficiently while ensuring a user-friendly experience.


#include <iostream>
#include <string>
#include <cctype>
#include <vector>
#include <algorithm>
#include <fstream>
#include <sstream>

using namespace std;

// Problem 2: Convert masculine pronouns to inclusive pronouns
string adjustPronouns(string text) {
    string result = "";
    string currentToken = "";

    for (int index = 0; index <= text.length(); index++) {
        char currentChar = text[index];
        if (isalpha(currentChar)) {
            currentToken += currentChar;
        } else {
            if (currentToken == "he") result += "he or she";
            else if (currentToken == "him") result += "him or her";
            else if (currentToken == "his") result += "his or her";
            else if (currentToken == "He") result += "He or She";
            else if (currentToken == "Him") result += "Him or Her";
            else if (currentToken == "His") result += "His or Her";
            else result += currentToken;

            if (index < text.length()) result += currentChar;
            currentToken = "";
        }
    }
    return result;
}

// Problem 5: Player score management
struct Player {
    string name;
    int score;
};

bool comparePlayers(const Player &a, const Player &b) {
    return a.score > b.score;
}

void addPlayer(vector<Player> &players, const string &name, int score) {
    Player newPlayer = {name, score};
    players.push_back(newPlayer);
    sort(players.begin(), players.end(), comparePlayers);
    if (players.size() > 10) players.pop_back();
}

void printTopPlayers(const vector<Player> &players) {
    for (const auto &player : players) cout << player.name << " " << player.score << endl;
}

void findPlayerScore(const vector<Player> &players, const string &name) {
    bool found = false;
    int highestScore = -1;
    for (const auto &player : players) {
        if (player.name == name) {
            found = true;
            highestScore = max(highestScore, player.score);
        }
    }
    if (found) cout << "Highest score for " << name << ": " << highestScore << endl;
    else cout << "Player not found or not in top 10." << endl;
}

// Problem 8: Printing stars in a pattern
void pattern(int n, int indent) {
    if (n == 0) return;
    pattern(n / 2, indent);
    for (int i = 0; i < indent; i++) cout << " ";
    for (int i = 0; i < n; i++) cout << "* ";
    cout << endl;
    pattern(n / 2, indent + n);
}

// Problem 11: File Comparison
void compareChars(const string& filename1, const string& filename2) {
    ifstream file1(filename1), file2(filename2);
    if (!file1.is_open() || !file2.is_open()) {
        cout << "Error opening one of the files." << endl;
        return;
    }

    char char1, char2;
    int charPos = 0;
    int lineNum1 = 1, lineNum2 = 1;
    while (file1.get(char1) && file2.get(char2)) {
        charPos++;
        if (char1 != char2) {
            cout << "Files differ at line " << lineNum1 << " (File1) vs line " << lineNum2 << " (File2), position " << charPos << endl;
            cout << "File1: " << char1 << " File2: " << char2 << endl;
            file1.close();
            file2.close();
            return;
        }
        if (char1 == '\n') lineNum1++;
        if (char2 == '\n') lineNum2++;
    }
    if (file1.eof() && file2.eof()) cout << "Files are the same." << endl;
    else cout << "Files differ in size." << endl;
    file1.close();
    file2.close();
}

void compareWords(const string& filename1, const string& filename2) {
    ifstream file1(filename1), file2(filename2);
    if (!file1.is_open() || !file2.is_open()) {
        cout << "Error opening one of the files." << endl;
        return;
    }

    string word1, word2;
    int lineNum1 = 1, lineNum2 = 1;
    int wordCount = 0;
    
    while (file1 >> word1 && file2 >> word2) {
        wordCount++;
        if (word1 != word2) {
            cout << "Files differ at line " << lineNum1 << " (File1) vs line " << lineNum2 << " (File2), word " << wordCount << endl;
            cout << "File1: " << word1 << " File2: " << word2 << endl;
            file1.close();
            file2.close();
            return;
        }
        if (file1.peek() == '\n') lineNum1++;
        if (file2.peek() == '\n') lineNum2++;
    }
    if (file1.eof() && file2.eof()) cout << "Files are the same." << endl;
    else cout << "Files differ in length or word content." << endl;
    file1.close();
    file2.close();
}

// Main menu
int main() {
    bool programRunning = true;
    while (programRunning) {
        int choice;
        cout << "**** Welcome to my program, choose a problem to work with: ****" << endl;
        cout << "1) Convert masculine pronouns to inclusive pronouns (problem 2)." << endl;
        cout << "2) Add and print top players (problem 5)." << endl;
        cout << "3) Printing stars (problem 8)." << endl;
        cout << "4) File Comparison (problem 11)." << endl;
        cout << "5) Exit the program." << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // Ignore newline characters left in the input stream

        switch (choice) {
            case 1: {
                string userInput;
                cout << "Please enter a text to convert: ";
                getline(cin, userInput);
                cout << "Converted text: " << adjustPronouns(userInput) << endl;
                break;
            }
            case 2: {
                vector<Player> players;
                int playerChoice;
                do {
                    cout << "\n1. Add a new player and score" << endl;
                    cout << "2. Print top 10 players and scores" << endl;
                    cout << "3. Find a player's highest score" << endl;
                    cout << "4. Exit to main menu" << endl;
                    cout << "Enter your choice: ";
                    cin >> playerChoice;

                    if (playerChoice == 1) {
                        string name;
                        int score;
                        cout << "Enter the player's name: ";
                        cin >> name;
                        cout << "Enter the player's score: ";
                        cin >> score;
                        addPlayer(players, name, score);
                    } else if (playerChoice == 2) {
                        printTopPlayers(players);
                    } else if (playerChoice == 3) {
                        string name;
                        cout << "Enter player name: ";
                        cin >> name;
                        findPlayerScore(players, name);
                    }
                } while (playerChoice != 4);
                break;
            }
            case 3: {
                int n;
                cout << "Enter a number (must be a power of 2): ";
                cin >> n;
                if (n > 0 && (n & (n - 1)) == 0) {
                    pattern(n, 0);
                } else {
                    cout << "Error, The number should be a power of 2." << endl;
                }
                break;
            }
            case 4: {
                string filename1, filename2;
                int comparisonChoice;
                cout << "Enter the first file name: ";
                cin >> filename1;
                cout << "Enter the second file name: ";
                cin >> filename2;
                cout << "Choose comparison (1: Char by Char, 2: Word by Word): ";
                cin >> comparisonChoice;
                if (comparisonChoice == 1) compareChars(filename1, filename2);
                else if (comparisonChoice == 2) compareWords(filename1, filename2);
                else cout << "Invalid choice." << endl;
                break;
            }
            case 5:
                cout << "Exiting the program..." << endl;
                programRunning = false;
                break;
            default:
                cout << "Invalid selection. Please enter a valid choice." << endl;
                break;
        }
        cout << endl;
    }
    return 0;
}
